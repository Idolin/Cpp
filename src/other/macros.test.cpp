#include "../debug/test_def.h"
#include "./defdef.h"

#include <algorithm>
#include <initializer_list>
#include <iostream>

TEST_PACK(macros)
{
    struct IntList
    {
        int *list;
        std::size_t length;

        IntList(): list(nullptr), length(0)
        {}

        IntList(std::initializer_list<int> l)
        {
            length = l.size();
            list = new int[l.size()];
            std::copy(l.begin(), l.end(), list);
        }

        IntList(unsigned repeat, int x): length(repeat)
        {
            list = new int[repeat];
            std::fill_n(list, repeat, x);
        }

        IntList(unsigned repeat, std::size_t length, std::initializer_list<int> l): length(repeat * l.size())
        {
            list = new int[this->length];
            while(repeat--)
                std::copy(l.begin(), l.end(), list + repeat * length);
        }

        IntList(unsigned repeat, std::size_t length, std::initializer_list<int> l, int end): length(repeat * l.size() + 1)
        {
            list = new int[this->length];
            while(repeat--)
                std::copy(l.begin(), l.end(), list + repeat * length);
            list[this->length - 1] = end;
        }

        ~IntList()
        {
            delete[] list;
        }

        bool operator==(const IntList& otr) const
        {
            if(length == otr.length)
                for(std::size_t i = 0;i < length;i++)
                {
                    if(list[i] == otr.list[i])
                        continue;
                    return false;
                }
            return (length == otr.length);
        }

        bool operator!=(const IntList& otr) const
        {
            return !(*this == otr);
        }

        template<typename... Ints>
        void set_values_len(Ints... values)
        {
            delete[] list;
            length = sizeof...(values) + 1;
            list = new int[length]{static_cast<int>(length) - 1, values...};
        }

        void print(std::ostream &s) const
        {
            s << '{';
            if(length)
            {
                s << list[0];
                for(unsigned i = 1;i < length;i++)
                    s << ", " << list[i];
            }
            s << '}' << std::endl;
        }
    };

    TEST(GET_ARGS_COUNT)
    {
        EXPECT_EQ(GET_ARGS_COUNT_L(), 1);
        EXPECT_EQ(GET_ARGS_COUNT_L(a), 1);
        EXPECT_EQ(GET_ARGS_COUNT_L(a, b), 2);
        EXPECT_EQ(GET_ARGS_COUNT_L(a, b, c), 3);
        EXPECT_EQ(GET_ARGS_COUNT_L(a, b, c, d, (e, e), (f, g)), 6);
        EXPECT_EQ(GET_ARGS_COUNT_L(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z), 26);
        EXPECT_EQ(GET_ARGS_COUNT_L(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, v, w, x, y, z,
                                 A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, V, W, X, Y, Z), 50);
    }

    TEST(GET_ARGS)
    {
        EXPECT_EQ(GET_FIRST(0), 0);
        EXPECT_EQ(GET_FIRST(0, 1), 0);
        EXPECT_EQ(GET_FIRST(0, 1, 2), 0);

        EXPECT_EQ(GET_SECOND(, 1), 1);
        EXPECT_EQ(GET_SECOND((), 1, 2), 1);
        EXPECT_EQ(GET_SECOND((0, 0), 1, 2, 3), 1);

        EXPECT_EQ((IntList{GET_3(0, 1, 2)}), (IntList{0, 1, 2}));
        EXPECT_EQ((IntList{GET_3(0, 1, 2, 3)}), (IntList{0, 1, 2}));
    }

    TEST(SKIP_LM)
    {
        EXPECT_EQ((IntList{SKIP_1L(0, 1, 2)}), (IntList{1, 2}));
        EXPECT_EQ((IntList{SKIP_1L(0, 1)}), (IntList{1}));
        EXPECT_EQ((IntList{SKIP_1L(0)}), (IntList{}));

        EXPECT_EQ((IntList{SKIP_1L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        EXPECT_EQ((IntList{SKIP_1M(0, 1, 2)}), (IntList{1, 2}));
        EXPECT_EQ((IntList{SKIP_1M(0, 1)}), (IntList{1}));
        EXPECT_EQ((IntList{SKIP_1M(0)}), (IntList{}));

        EXPECT_EQ((IntList{SKIP_1M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        EXPECT_EQ((IntList{SKIP_1M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                  50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                  68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                  86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));
    }

    TEST(CSKIP_LM)
    {
        EXPECT_EQ((IntList{3 CSKIP_1L(0, 1, 2)}), (IntList{3, 1, 2}));
        EXPECT_EQ((IntList{2 CSKIP_1L(0, 1)}), (IntList{2, 1}));
        EXPECT_EQ((IntList{CSKIP_1L(0)}), (IntList{}));

        EXPECT_EQ((IntList{50 CSKIP_1L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        EXPECT_EQ((IntList{3 CSKIP_1M(0, 1, 2)}), (IntList{3, 1, 2}));
        EXPECT_EQ((IntList{2 CSKIP_1M(0, 1)}), (IntList{2, 1}));
        EXPECT_EQ((IntList{CSKIP_1M(0)}), (IntList{}));

        EXPECT_EQ((IntList{50 CSKIP_1M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        EXPECT_EQ((IntList{102 CSKIP_1M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                  50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                  68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                  86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)}),
                  (IntList{102, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));
    }

    TEST(GNU_VA_ARGS_COMMA_EXTENSION_EMULATION)
    {
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA()), "");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(a)), ", a");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(a, b)), ", a, b");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA((a))), ", (a)");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(())), ", ()");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(a ())), ", a ()");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(f())), ", f()");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(1)), ", 1");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(-)), ", -");
        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(((()))(())())), ", ((()))(())()");

        EXPECT_CSTRING_EQ(QUOTE_W(GNU_VA_ARGS_COMMA(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                  50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                  68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                  86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)),
                          ", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "
                          "16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, "
                          "32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, "
                          "50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, "
                          "68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, "
                          "86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101");
    }

    TEST(MULT_ARG_R)
    {
#define MTEST_DOUBLE(...) __VA_ARGS__, __VA_ARGS__
#define MTEST_SKIP_1E(empty, ...) __VA_ARGS__
#define LAST_MTEST_SKIP_1E(...) __VA_ARGS__

        EXPECT_EQ((IntList{MULT_ARG_R_N(3, MTEST_SKIP_1E, EMPTY, MTEST_DOUBLE, 1)}), IntList(1u << 2, 1));
        EXPECT_EQ((IntList{MULT_ARG_R_N(4, MTEST_SKIP_1E, EMPTY, MTEST_DOUBLE, 1, 2)}), IntList(1u << 3, 2, {1, 2}));
        EXPECT_EQ((IntList{MULT_ARG_R_N(9, MTEST_SKIP_1E, EMPTY, MTEST_DOUBLE, 1, 2, 2)}), IntList(1u << 8, 3, {1, 2, 2}));

        EXPECT_EQ((IntList{MULT_ARG_R_C(MTEST_SKIP_1E, EMPTY, MTEST_DOUBLE, 1)}), IntList(1u << 0, 1));
        EXPECT_EQ((IntList{MULT_ARG_R_C(MTEST_SKIP_1E, EMPTY, MTEST_DOUBLE, 1, 2)}), IntList(1u << 1, 2, {1, 2}));
        EXPECT_EQ((IntList{MULT_ARG_R_C(MTEST_SKIP_1E, EMPTY, MTEST_DOUBLE, 1, 2, 2)}), IntList(1u << 2, 3, {1, 2, 2}));
    }

    TEST(MULT_ARG)
    {
        EXPECT_EQ((IntList{MULT_ARG(0, 1, 2, 3)}), IntList({}));
        EXPECT_EQ((IntList{MULT_ARG(1, 1, 2, 3)}), IntList({1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG(4, 1, 2, 3)}), IntList(4, 3, {1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG(50, 1, 2, 3)}), IntList(50, 3, {1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG(2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)}),
                  IntList(2, 102, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                   50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                   68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                   86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));
    }

    TEST(MULT_ARGC)
    {
        EXPECT_EQ((IntList{MULT_ARGC(0, 1, 2, 3)}), IntList({}));
        EXPECT_EQ((IntList{MULT_ARGC(1, 1, 2, 3) 4}), IntList({1, 2, 3, 4}));
        EXPECT_EQ((IntList{MULT_ARGC(4, 1, 2, 3) 7}), IntList(4, 3, {1, 2, 3}, 7));
        EXPECT_EQ((IntList{MULT_ARGC(50, 1, 2, 3) 9}), IntList(50, 3, {1, 2, 3}, 9));
        EXPECT_EQ((IntList{MULT_ARGC(2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101) 102}),
                  IntList(2, 102, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                   50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                   68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                   86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}, 102));
    }

    TEST(MULT_ARG_50_MN)
    {
        EXPECT_EQ((IntList{MULT_ARG_50_MN(0, 1, 2, 3)}), IntList(50, 3, {1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG_50_MN(1, 1, 2, 3)}), IntList(49, 3, {1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG_50_MN(4, 1, 2, 3)}), IntList(46, 3, {1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG_50_MN(49, 1, 2, 3)}), (IntList{1, 2, 3}));
        EXPECT_EQ((IntList{MULT_ARG_50_MN(50, 1, 2, 3)}), IntList{});
        EXPECT_EQ((IntList{MULT_ARG_50_MN(48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)}),
                  IntList(2, 102, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                   50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                   68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                   86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));
    }

    TEST(GET_ARG_N)
    {
        EXPECT_EQ(GET_ARG_N(0, 0, 1, 2, 3, 4, 5, 6, 7), 0);
        EXPECT_EQ(GET_ARG_N(1, 0, 1, 2, 3, 4, 5, 6, 7), 1);
        EXPECT_EQ(GET_ARG_N(4, 0, 1, 2, 3, 4, 5, 6, 7), 4);
        EXPECT_EQ(GET_ARG_N(7, 0, 1, 2, 3, 4, 5, 6, 7), 7);
        EXPECT_EQ(GET_ARG_N(0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50), 0);
        EXPECT_EQ(GET_ARG_N(1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50), 1);
        EXPECT_EQ(GET_ARG_N(34, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50), 34);
        EXPECT_EQ(GET_ARG_N(49, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50), 49);
        EXPECT_EQ(GET_ARG_N(50, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50), 50);
        EXPECT_EQ(GET_ARG_N(0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                            68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                            86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), 0);
        EXPECT_EQ(GET_ARG_N(10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                            68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                            86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), 10);
        EXPECT_EQ(GET_ARG_N(50, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                            32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                            68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                            86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), 50);
    }

    TEST(EXCLUDE_LAST)
    {
        EXPECT_EQ((IntList{EXCLUDE_LAST_L(0, 1, 2, 3)}), IntList({0, 1, 2}));
        EXPECT_EQ((IntList{EXCLUDE_LAST_L(0, 1)}), IntList({0}));
        EXPECT_EQ((IntList{EXCLUDE_LAST_L(0)}), IntList({}));
        EXPECT_EQ((IntList{EXCLUDE_LAST_L()}), IntList({}));
        EXPECT_EQ((IntList{EXCLUDE_LAST_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)}),
                  IntList({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}));
        EXPECT_EQ((IntList{EXCLUDE_LAST_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  IntList({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));
    }

    TEST(GET_LAST)
    {
        EXPECT_EQ(GET_LAST_L(0, 1, 2, 3), 3);
        EXPECT_EQ(GET_LAST_L(0, 1), 1);
        EXPECT_EQ(GET_LAST_L(0), 0);
        EXPECT_EQ((IntList{GET_LAST_L()}), IntList({}));
        EXPECT_EQ(GET_LAST_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48), 48);
        EXPECT_EQ(GET_LAST_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), 49);
    }

    TEST(SUB_FROM_50)
    {
        EXPECT_EQ(SUB_FROM_50(0), 50);
        EXPECT_EQ(SUB_FROM_50(1), 49);
        EXPECT_EQ(SUB_FROM_50(2), 48);
        EXPECT_EQ(SUB_FROM_50(7), 43);
        EXPECT_EQ(SUB_FROM_50(47), 3);
        EXPECT_EQ(SUB_FROM_50(48), 2);
        EXPECT_EQ(SUB_FROM_50(49), 1);
        EXPECT_EQ(SUB_FROM_50(50), 0);
    }

    TEST(PREV_and_NEXT)
    {
        EXPECT_EQ(NEXT_NUM(0), 1);
        EXPECT_EQ(PREV_NUM(1), 0);
        EXPECT_EQ(NEXT_NUM(1), 2);
        EXPECT_EQ(PREV_NUM(2), 1);
        EXPECT_EQ(NEXT_NUM(2), 3);
        EXPECT_EQ(PREV_NUM(10), 9);
        EXPECT_EQ(NEXT_NUM(10), 11);
        EXPECT_EQ(PREV_NUM(40), 39);
        EXPECT_EQ(NEXT_NUM(40), 41);
        EXPECT_EQ(PREV_NUM(48), 47);
        EXPECT_EQ(NEXT_NUM(48), 49);
        EXPECT_EQ(PREV_NUM(49), 48);
        EXPECT_EQ(NEXT_NUM(49), 50);
        EXPECT_EQ(PREV_NUM(50), 49);
        EXPECT_EQ(NEXT_NUM(50), 51);
    }

    TEST(COMPARE_NUM)
    {
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(0, 0)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(1, 1)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(2, 2)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(3, 3)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(10, 10)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(40, 40)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(48, 48)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(49, 49)), "E");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(50, 50)), "E");

        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(0, 1)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(0, 50)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(1, 2)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(47, 48)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(1, 49)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(1, 50)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(49, 50)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(0, 49)), "L");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(20, 30)), "L");

        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(1, 0)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(50, 0)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(2, 1)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(48, 47)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(49, 1)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(50, 1)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(50, 49)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(49, 0)), "G");
        EXPECT_CSTRING_EQ(QUOTE_W(COMPARE_NUM(30, 20)), "G");
    }

    TEST(GET_ARG_DEF)
    {
        EXPECT_EQ(GET_ARG_DEF_L(0), 0);
        EXPECT_EQ((IntList{GET_ARG_DEF_L()}), (IntList{}));
        EXPECT_EQ((IntList{GET_ARG_DEF_L(0, 1)}), (IntList{1}));
        EXPECT_EQ((IntList{GET_ARG_DEF_L(0, 1, 2, 3)}), (IntList{1, 2, 3}));
        EXPECT_EQ((IntList{GET_ARG_DEF_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));
        EXPECT_EQ((IntList{GET_ARG_DEF_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        EXPECT_EQ(GET_ARG_DEF_M(0), 0);
        EXPECT_EQ((IntList{GET_ARG_DEF_M()}), (IntList{}));
        EXPECT_EQ((IntList{GET_ARG_DEF_M(0, 1)}), (IntList{1}));
        EXPECT_EQ((IntList{GET_ARG_DEF_M(0, 1, 2, 3)}), (IntList{1, 2, 3}));
        EXPECT_EQ((IntList{GET_ARG_DEF_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));
        EXPECT_EQ((IntList{GET_ARG_DEF_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));
        EXPECT_EQ((IntList{GET_ARG_DEF_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                      32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                      50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                      68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                      86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)}),
                  (IntList{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));

        EXPECT_EQ((IntList{GET_ARG_DEF2_L(0, 1)}), (IntList{0, 1}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_L(0, 1, 2)}), (IntList{2}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_L(0, 1, 2, 3)}), (IntList{2, 3}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)}),
                  (IntList{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        EXPECT_EQ((IntList{GET_ARG_DEF2_M(0, 1)}), (IntList{0, 1}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_M(0, 1, 2)}), (IntList{2}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_M(0, 1, 2, 3)}), (IntList{2, 3}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)}),
                  (IntList{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));
        EXPECT_EQ((IntList{GET_ARG_DEF2_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                      32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                      50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                      68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                      86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)}),
                  (IntList{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                           50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                           68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                           86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));
    }

    TEST(FCALL_IF)
    {
        IntList l;

        FCALL_IF_ARGS_L(l.set_values_len, 4);
        EXPECT_EQ(l, (IntList{1, 4}));

        FCALL_IF_ARGS_L(l.set_values_len);
        EXPECT_EQ(l, (IntList{1, 4}));

        FCALL_IF_ARGS_L(l.set_values_len, 2, 3);
        EXPECT_EQ(l, (IntList{2, 2, 3}));

        FCALL_IF_ARGS_L(l.set_values_len, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                             16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48);
        EXPECT_EQ(l, (IntList{49, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));

        FCALL_IF_ARGS_L(l.set_values_len, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                             16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49);
        EXPECT_EQ(l, (IntList{50, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        FCALL_IF_ARGS_M(l.set_values_len, 4);
        EXPECT_EQ(l, (IntList{1, 4}));

        FCALL_IF_ARGS_M(l.set_values_len);
        EXPECT_EQ(l, (IntList{1, 4}));

        FCALL_IF_ARGS_M(l.set_values_len, 2, 3);
        EXPECT_EQ(l, (IntList{2, 2, 3}));

        FCALL_IF_ARGS_M(l.set_values_len, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                             16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48);
        EXPECT_EQ(l, (IntList{49, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));

        FCALL_IF_ARGS_M(l.set_values_len, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                             16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49);
        EXPECT_EQ(l, (IntList{50, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49}));

        FCALL_IF_ARGS_M(l.set_values_len, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                        68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                        86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101);
        EXPECT_EQ(l, (IntList{102, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                              50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                              68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                              86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}));
    }

    TEST(FCALL_IF_GT)
    {
        IntList l;

        FCALL_IF_ARGS_GT_N_L(0, l.set_values_len, 4);
        EXPECT_EQ(l, (IntList{1, 4}));

        FCALL_IF_ARGS_GT_N_L(1, l.set_values_len, 3);
        EXPECT_EQ(l, (IntList{1, 4}));

        FCALL_IF_ARGS_GT_N_L(1, l.set_values_len, 2, 3);
        EXPECT_EQ(l, (IntList{2, 2, 3}));

        FCALL_IF_ARGS_GT_N_L(0, l.set_values_len, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                             16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48);
        EXPECT_EQ(l, (IntList{49, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));

        FCALL_IF_ARGS_GT_N_L(48, l.set_values_len, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                             16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                             32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48);
        EXPECT_EQ(l, (IntList{49, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                              16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                              32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48}));

        FCALL_IF_ARGS_GT_N_L(3, l.set_values_len, 0, 1, 2, 3, 4, 5, 6, 7);
        EXPECT_EQ(l, (IntList{8, 0, 1, 2, 3, 4, 5, 6, 7}));

        FCALL_IF_ARGS_GT_N_L(7, l.set_values_len, 0, 1, 2, 3, 4, 5, 6);
        EXPECT_EQ(l, (IntList{8, 0, 1, 2, 3, 4, 5, 6, 7}));

        FCALL_IF_ARGS_GT_N_L(50, l.set_values_len);
        EXPECT_EQ(l, (IntList{8, 0, 1, 2, 3, 4, 5, 6, 7}));

        FCALL_IF_ARGS_GT_N_L(7, l.set_values_len, 4, 1, 2, 3, 4, 5, 6, 7);
        EXPECT_EQ(l, (IntList{8, 4, 1, 2, 3, 4, 5, 6, 7}));

        FCALL_IF_ARGS_GT_N_L(1, l.set_values_len, 1);
        EXPECT_EQ(l, (IntList{8, 4, 1, 2, 3, 4, 5, 6, 7}));

        FCALL_IF_ARGS_GT_N_L(1, l.set_values_len);
        EXPECT_EQ(l, (IntList{8, 4, 1, 2, 3, 4, 5, 6, 7}));

        FCALL_IF_ARGS_GT_N_L(1, l.set_values_len, 1, 2);
        EXPECT_EQ(l, (IntList{2, 1, 2}));
    }

    TEST(FREE)
    {
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L(a)), "a");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L(a, b)), "a, b");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                         16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                         32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)),
                          "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "
                          "16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, "
                          "32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L((a))), "a");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L((a), b)), "(a), b");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L(((a)))), "(a)");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L((a, b))), "a, b");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_L((a, b), c)), "(a, b), c");

        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M(a)), "a");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M(a, b)), "a, b");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                         16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                         32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48)),
                          "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "
                          "16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, "
                          "32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M((a))), "a");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M((a), b)), "(a), b");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M(((a)))), "(a)");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M((a, b))), "a, b");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M((a, b), c)), "(a, b), c");
        EXPECT_CSTRING_EQ(QUOTE_W(FREE_M((0), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                                         16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                         32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                         50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
                                         68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
                                         86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101)),
                          "(0), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "
                          "16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, "
                          "32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, "
                          "50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, "
                          "68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, "
                          "86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101");
    }

    TEST(REVERSE)
    {
        EXPECT_EQ((IntList{REVERSE_L()}), (IntList{}));
        EXPECT_EQ((IntList{REVERSE_L(0)}), (IntList{0}));
        EXPECT_EQ((IntList{REVERSE_L(0, 1)}), (IntList{1, 0}));
        EXPECT_EQ((IntList{REVERSE_L(0, 1, 2)}), (IntList{2, 1, 0}));
        EXPECT_EQ((IntList{REVERSE_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)}),
                  (IntList{10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}));
        EXPECT_EQ((IntList{REVERSE_L(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                           16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                           32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49)}),
                  (IntList{49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32,
                           31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,
                           13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}));
    }

    TEST(SEQ_10)
    {
        EXPECT_CSTRING_EQ(QUOTE_W(SEQ_10_POW(0)), "");
        EXPECT_CSTRING_EQ(QUOTE_W(SEQ_10_POW(1)), "1");
        EXPECT_CSTRING_EQ(QUOTE_W(SEQ_10_POW(2)), "1, 10");
        EXPECT_CSTRING_EQ(QUOTE_W(SEQ_10_POW(3)), "1, 10, 100");
        EXPECT_CSTRING_EQ(QUOTE_W(SEQ_10_POW(49)),
                          "1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, "
                          "10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, "
                          "1000000000000000, 10000000000000000, 100000000000000000, 1000000000000000000, "
                          "10000000000000000000, 100000000000000000000, 1000000000000000000000, 10000000000000000000000, "
                          "100000000000000000000000, 1000000000000000000000000, 10000000000000000000000000, "
                          "100000000000000000000000000, 1000000000000000000000000000, 10000000000000000000000000000, "
                          "100000000000000000000000000000, 1000000000000000000000000000000, 10000000000000000000000000000000, "
                          "100000000000000000000000000000000, 1000000000000000000000000000000000, 10000000000000000000000000000000000, "
                          "100000000000000000000000000000000000, 1000000000000000000000000000000000000, "
                          "10000000000000000000000000000000000000, 100000000000000000000000000000000000000, "
                          "1000000000000000000000000000000000000000, 10000000000000000000000000000000000000000, "
                          "100000000000000000000000000000000000000000, 1000000000000000000000000000000000000000000, "
                          "10000000000000000000000000000000000000000000, 100000000000000000000000000000000000000000000, "
                          "1000000000000000000000000000000000000000000000, 10000000000000000000000000000000000000000000000, "
                          "100000000000000000000000000000000000000000000000, 1000000000000000000000000000000000000000000000000");
        EXPECT_CSTRING_EQ(QUOTE_W(SEQ_10_POW(50)),
                          "1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, "
                          "10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, "
                          "1000000000000000, 10000000000000000, 100000000000000000, 1000000000000000000, "
                          "10000000000000000000, 100000000000000000000, 1000000000000000000000, 10000000000000000000000, "
                          "100000000000000000000000, 1000000000000000000000000, 10000000000000000000000000, "
                          "100000000000000000000000000, 1000000000000000000000000000, 10000000000000000000000000000, "
                          "100000000000000000000000000000, 1000000000000000000000000000000, 10000000000000000000000000000000, "
                          "100000000000000000000000000000000, 1000000000000000000000000000000000, 10000000000000000000000000000000000, "
                          "100000000000000000000000000000000000, 1000000000000000000000000000000000000, "
                          "10000000000000000000000000000000000000, 100000000000000000000000000000000000000, "
                          "1000000000000000000000000000000000000000, 10000000000000000000000000000000000000000, "
                          "100000000000000000000000000000000000000000, 1000000000000000000000000000000000000000000, "
                          "10000000000000000000000000000000000000000000, 100000000000000000000000000000000000000000000, "
                          "1000000000000000000000000000000000000000000000, 10000000000000000000000000000000000000000000000, "
                          "100000000000000000000000000000000000000000000000, 1000000000000000000000000000000000000000000000000, "
                          "10000000000000000000000000000000000000000000000000");
    }
}
